01.07.2016

- Première utilisation du fichier BoxesInfo.json, utilisé pour voir quel boite peut etre mise dans une autre (une trop grande ne peut pas rentrer dans une petite) 
	Tout cela grâce à un classement des boites qui est fait dans le JSON avec l'attribut "containerClass". Plus il est petit, plus la boite est grande, 
	une boite avec un "containerClass" de 1 peut contenir des boites de "containerClass" inférieur strictement à 1
	
	RQ : Problemes pour charger le fichier JSON dans le programme, finalement on utilise "import boxFile from '../Boxes/BoxesInfo.json';" pour importer le fichier
		après beaucoup d'erreurs cela marche.

- Creation des pages d'ajout de contenu "AddContent" pour une boite selectionnée

	RQ :Attention à componentWillReceiveProps dans lequel un setstate doit prendre nextProps !!!!


04.07.2016

- Possible d'enregistrer le contenu d'une boite
- On peut éditer les info de la boite selectionnée


05.07.2016

- On peut emprunter la boite selectionnée 
- On peut ajouter un conteneur à See Boxes
- Le print nous reconduit directement vers la page de la boite créée

06.07.2016

- Création d'une page pour chercher les ToktNr 
- Réflexion sur un moyen d'implémenter cette recherche dans des Forms (peut etre en mettant un form à l'intérieur d'un autre form) 
	et réflexion sur la création d'un dossier forms dans lequel il y aurait tous les Forms que l'on utilise dans le programme et ceux-ci prendraient en compte
	le changement de langue, la recherche du toktNr et aussi la vérification des bons types (int, string ...etc) dans les forms.
	Cette vérification peut etre faite grace à un JSON dans lequel on met le type de chaque donnée, ou sinon on peut implémenter un nouvel attribut dans 
	le JSON existant et mettre une fonction qui vérifie à chaque submit le bon type et renvoi des inputs rouges et vides pour les cases qui sont mal remplies.


07.07.2016

- Modification du fichier BoxesInfo.JSON dans lequel on a rajouté "oblidge","warning","dataType" qui pour chaque formulaire nous permet de determiner les données obligatoires et les 		autres.

- Création du premier form dynamique qui est le "BorrowingForm", il affiche des inputs de différentes couleurs en fonction de si l'information est 
	entrée ou pas et si elle est importante. Le form peut aussi gérer le changement de langue ! Dans chaque form il y aura un bouton pour mettre des fonctions internes au component mais aussi pour éviter de lancer une fonction qui ne peut pas de finir, comme l'update de la db à cause du coté asynchrone du changement de props que cela induirait si on ne mettait pas de boutons dans le form. On peut donc attacher une fonction des le clic du bouton dans le form et à la fin de cette fonction "this.props.onClick(event)" permet au parent de recevoir le clic.

	RQ : Création d'une nouvelle fonction pour transformer une date en string efficace, voir pour un fichier où pourraient être toutes les fonctions utilisées dans le programme.


12.07.2016

- Mise en place d'un fichier qui répertorie les functions à utiliser, ces fonctions sont ensuite importés dans le component qui en a besoin.
- Découverte et utilisation d'un select avec choix multiple.
- Adaptation du select à choix multiple dans les components pour trouver le toktNr en cours.
- Correction du fichier BoxesInfo.json pour avoir une orthographe correcte.


14.07.2016

-fin des problemes de chargement asynchrone qui n'affichaient pas toutes les dates et bateaux avec
- Probleme pour gérer les values des différents select et donc aussi impossibilité de gérer la suppression d'une année sur le select du dessous avec les bateaux... etc
	Voir comment on peut changer les values dans les selects.